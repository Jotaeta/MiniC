1#S-> id
2#S-> V := E
3#V-> id
4#E-> V
5#E-> num

PROGRAM-> DECL DECLA
DECLA-> DECL
DECLA-> ''
DECL -> VARIABLEDECL
DECL -> FUNCTIONDECL
DECL -> CONSTDECL
DECL -> CLASSDECL
DECL -> INTERFACEDECL
DECL -> DECLA
VARIABLEDECL -> VARIABLEDECL
VARIABLEDECL -> VARIABLE ;
VARIABLEDECL -> ''
VARIABLE -> TYPE ident
CONSTDECL -> const CONSTTYPE ident ;
CONSTDECL -> CONSTDECL
CONSTDECL -> ''
CONSTTYPE -> int
CONSTTYPE -> double
CONSTTYPE -> bool
CONSTTYPE -> string
TYPE -> int
TYPE -> double
TYPE -> bool
TYPE -> string
TYPE -> ident
TYPE -> TYPE []
FUNCTIONDECL -> TYPE ident ( FORMALS ) STMTBLOCK
FUNCTIONDECL -> void ident ( FORMALS ) STMTBLOCK
FORMALS -> VARIABLE , FORMALS
FORMALS -> VARIABLE
CLASSDECL -> class ident PIDENT CIDENT { FIELD }
PIDENT -> : ident
PIDENT -> ''
CIDENT -> , ident IDENT ,
CIDENT -> ''
IDENT -> ident IDENT
IDENT -> ''
FIELD -> FIELD
FIELD -> VARIABLEDECL
FIELD -> FUNCTIONDECL
FIELD -> ''
INTERFACEDECL -> interface ident { PROTOTYPE }
PROTOTYPE -> PROTOTYPE
PROTOTYPE -> TYPE ident ( FORMALS ) ;
PROTOTYPE -> void ident ( FORMALS ) ;
PROTOTYPE -> ''
STMTBLOCK -> { VARIABLEDECL CONSTDECL STMT }
STMT -> EEXPR ;
STMT -> IFSTMT
STMT -> WHILESTMT
STMT -> FORSTMT
STMT -> BREAKSTMT
STMT -> RETURNSTMT
STMT -> PRINTSTMT
STMT -> STMTBLOCK
STMT -> STMT
STMT -> ''
EEXPR -> EXPR
EEXPR -> ''
IFSTMT -> if ( EXPR ) STMT ELSE
ELSE -> else STMT
ELSE -> ''
WHILESTMT -> while ( EXPR ) STMT
FORSTMT -> for ( EXPR ; EXPR ; EXPR ) STMT
RETURNSTMT -> return EXPR ;
BREAKSTMT -> break ;
PRINTSTMT -> Console.Writeline ( EXPR , ) ;
EXPR -> LVALUE = EXPR
EXPR -> CONSTANT
EXPR -> LVALUE
EXPR -> this
EXPR -> ( EXPR )
EXPR -> EXPR + EXPR
EXPR -> EXPR * EXPR
EXPR -> EXPR % EXPR
EXPR -> - EXPR
EXPR -> EXPR < EXPR
EXPR -> EXPR <= EXPR
EXPR -> EXPR == EXPR
EXPR -> EXPR && EXPR
EXPR -> ! EXPR
EXPR -> new ( ident )
EXPR -> EXPR
EXPR -> ''
LVALUE -> ident
LVALUE -> EXPR .ident
CONSTANT -> const int intConstant
CONSTANT -> const double doubleConstant
CONSTANT -> const bool boolConstant
CONSTANT -> const string stringConstant
CONSTANT -> null